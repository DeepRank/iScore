#!/usr/bin/env python
from iScore.graphrank.kernel import iscore_kernel
import argparse

#################################################################
# Compute the pairwise kernels of the graphs that are
# located by default in :
#	./graph
#################################################################

# parse arguments
parser = argparse.ArgumentParser(description=' iScore - Compute Kernels')

# test and train IDS
parser.add_argument('--testID', type=str, default=None,help='list of ID for testing. Default: all the graphs in test_graph')
parser.add_argument('--trainID', type=str, default=None,help='list of ID for training. Default: all the graphs in train_graph')

# graphs of the individual complex
parser.add_argument('--test_graph',type=str,default='./graph',help='folder containing the graph of each complex. Default: ./graph')
parser.add_argument('--train_graph',type=str,default='./graph',help='folder containing the graph of each complex. Default: ./graph')

# file containing the kernel for checking
parser.add_argument('--check',type=str,default=None,help='file containing the kernel. Default: None')

# where to write the output file
parser.add_argument('--outfile',type=str,default='kernel.pkl',help='Output file containing the calculated Kernel values. Default: kernel.pkl')

# what to do:  tune the kernel, test the calculation, run the entire calculations
parser.add_argument('--tune_kernel',action='store_true',help='Only tune the CUDA kernel')
parser.add_argument('--test',action='store_true',help='Only test the functions on a single pair pair of graph ')

# parameter of the calculations
parser.add_argument('--lamb',type=float,default=1,help='Lambda parameter in the Kernel calculations. Default: 1')
parser.add_argument('--walk',type=int,default=3,help='Max walk length in the Kernel calculations. Default: 3')
parser.add_argument('--method',type=str,default='vect',help="Method used in the calculation: 'vect'(default), 'combvec', 'iter'")

# cuda parameters
parser.add_argument('--func',type=str,default='all',help='functions to tune in the kernel. Defaut: all functions')
parser.add_argument('--cuda',action='store_true', help='Use CUDA kernel')
parser.add_argument('--gpu_block',nargs='+',default=[8,8,1],type=int,help='number of gpu block to use. Default: 8 8 1')

args = parser.parse_args()



iscore_kernel(testID=args.testID,trainID=args.trainID,
	              test_graph=args.test_graph, train_graph=args.train_graph,
	              check=args.check, outfile=args.outfile,test=args.test,
	              lamb=args.lamb, walk=args.walk, method=args.method,
	              tune_kernel=args.tune_kernel,func=args.func,cuda=args.cuda, gpu_block=args.gpu_block)
