#!/usr/bin/env python
import os
import subprocess
import argparse
import iScore
from iScore.graphrank.graph import iscore_graph
from iScore.graphrank.kernel import iscore_kernel
from iScore.graphrank.rank import iscore_svm

from iScore.energetic.energy import iscore_energy
from iScore.function.score import iscore

# set the default trained model
pkg_path = os.path.dirname(iScore.__file__)
trained_model = os.path.join(pkg_path, 'model', 'training_set.tar.gz')

##########################################################################
# Predict the class of the graphs located by default in ./graph
# using the trained model stored in the archive file training_set.tar.gz
#########################################################################

# parse arguments
parser = argparse.ArgumentParser(description=' iScore - Predict the class of new conformations')

# where the kernels are stored
parser.add_argument('-gt', '--ground_truth',default=None,type=str,help='File containing the ground truth')

# walk length for kernel
parser.add_argument('--walk',default=3, type=int, help='walk length for creating kernel')

# max walk length to use in svm
parser.add_argument('--maxlen', type=int, default=None, help='max walk length of the kernel. Default max len possible with the kernel file')

# where the kernels are stored
parser.add_argument('--kernel',default='./kernel/',type=str,help='Kernel pickle file to use')

# where the graphs are stored
parser.add_argument('--graph',default='./graph/',type=str,help='Graph pickle file to use')

# archive model to use
parser.add_argument('--archive',default=trained_model,help='model archive we want to use')

# archive model to use
parser.add_argument('--energy',default='haddock',help='energy terms : None or haddock(default)')

# archive model to use
parser.add_argument('--hdf5',action="store_true",help='store the graphs in a hdf5 file')

# get the args
args = parser.parse_args()

# create the graphss
if not os.path.isdir(args.graph):
    os.mkdir(args.graph)
    iscore_graph(outdir=args.graph,export_hdf5=args.hdf5)
else:
    print('Reusing graphs in %s' %(args.graph))

# compute the kernels
if not os.path.isdir(args.kernel):
    os.mkdir(args.kernel)
    kfile = os.path.join(args.kernel,'kernel.pckl')
    iscore_kernel(test_graph=args.graph,walk=args.walk,train_archive=args.archive,outfile=kfile)
else:
    print('Reusing kernels in %s' %(args.kernel))

# grahrank score
iscore_svm(load_model=None,package_name=args.archive,maxlen=args.maxlen,testID=args.ground_truth)

# add energy terms
iscore_energy(method=args.energy)

# # final energy function
iscore()
