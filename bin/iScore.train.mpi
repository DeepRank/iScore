#!/usr/bin/env python
import os
import argparse
from iScore.graphrank.graph import iscore_graph_mpi
from iScore.graphrank.kernel import iscore_kernel_mpi
from iScore.graphrank.rank import iscore_svm
from mpi4py import MPI


##########################################################################
# Train a model
#########################################################################


# parse arguments
parser = argparse.ArgumentParser(description=' iScore - Train a model')

# where the kernels are stored
parser.add_argument('--kernel',default='./kernel/',type=str,help='Kernel pickle file to use')

# where the graphs are stored
parser.add_argument('--graph',default='./graph/',type=str,help='Graph pickle file to use')

parser.add_argument('--archive',default='training_set.tar.gz', type = str, help='name of the achive')

# walk length for kernel
parser.add_argument('--walk',default=3, type=int, help='walk length for creating kernel')

# max walk length to use in svm
parser.add_argument('--maxlen', type=int, default=None, help='max walk length of the kernel. Default max len possible with the kernel file')

# get the args
args = parser.parse_args()


comm = MPI.COMM_WORLD
rank = comm.Get_rank()
size = comm.Get_size()

# create the graphs
if rank == 0:
	if not os.path.isdir(args.graph):
		os.mkdir(args.graph)

comm.Barrier()

iscore_graph_mpi(outdir=args.graph,rank=rank,size=size,mpi_comm=comm)

comm.Barrier()

# compute the kernels
if rank == 0:
	if not os.path.isdir(args.kernel):
		os.mkdir(args.kernel)

comm.Barrier()
kfile = os.path.join(args.kernel,'kernel.pckl')
iscore_kernel_mpi(outfile=kfile,walk=args.walk,rank=rank,size=size)

comm.Barrier()

# train the model
if rank == 0:
	iscore_svm(train=True, package_model=True, maxlen=args.maxlen, package_name=args.archive)
